1. See `FilterLock.java` and `LamportBakeryLock.java`.

2. Q: Consider LockOne and LockTwo introduced in Chapter 2 of the course text; do they still satisfy two-thread mutual exclusion if the shared atomic registers - “flag” in LockOne and “victim” in LockTwo - are replaced by regular registers?

   A: .

3. Consider the protocol shown in Fig. 1 which is supposed to achieve n-thread mutual exclusion.
    ```java
    1 | class LockThree implements Lock {
    2 |   private int turn;
    3 |   private boolean busy = false;
    4 |   public void lock() {
    5 |     int me = ThreadID.get();
    6 |     turn = me;
    7 |     do {
    8 |       busy = true;
    9 |     } while ( turn = me && busy);
    10|   }
    11|   public void unlock() {
    12|     busy = false;
    13|   }
    14| }
    ```
    1. Does this protocol satisfy mutual exclusion?

        .
    2. Is this protocol deadlock-free?

        .
    3. Is this protocol starvation-free?

        .

4. For each of the histories shown in Figs. 2 and 3, are they sequentially consistent? Linearizable?

5. Consider the class shown in Fig. 4.
    ```java
    1 | class VolatileExample {
    2 |     int x = 0;
    3 |     volatile boolean v = false;
    4 |     public void writer() {
    5 |         x = 42;
    6 |         v = true;
    7 |     }
    8 |     public void reader() {
    9 |         if (v == true) {
    10|             int y = 100/x;
    11|         }
    12|     }
    13| }
    ```
    Suppose two threads A and B are concurrently calling the methods writer and reader.
    1. According to what you have been told about the Java memory model, will the reader method ever divide by zero? If yes, describe the order in which writer and reader should be invoked (by threads A and B) and take effect for a division by zero to happen.

        .
    2. Is division by zero possible if both x and v are volatile? What happens if none of x and v are volatile?

        .

6. Consider the regular M-valued MRSW construction shown in Fig. 5
    ```java
    1 | public class RegMRSWRegister implements Register<Byte> {
    2 |     private static int RANGE = Byte.MAX_VALUE - Byte.MIN_VALUE + 1;
    3 |     boolean[] r_bit = new boolean[RANGE]; // regular boolean MRSW
    4 |     public RegMRSWRegister(int capacity) {
    5 |         for (int i = 1; i < r_bit.length; i++)
    6 |             r_bit[i] = false;
    7 |         r_bit[0] = true;
    8 |     }
    9 |     public void write(Byte x) {
    10|         r_bit[x] = true;
    11|         for (int i = x - 1; i >= 0; i--)
    12|             r_bit[i] = false;
    13|     }
    14|     public Byte read() {
    15|         for (int i = 0; i < RANGE; i++)
    16|             if (r_bit[i]) {
    17|                 return i;
    18|             }
    19|         return -1; // impossible
    20|     }
    21| }
    ```
    True or false:
    1. If we change the loop at line 11 to `for (int i = x + 1; i < RANGE; i++)`, then the construction is still a regular M-valued MRSW register.

        .
    2. If we change the loop at line 11 to `for (int i = x + 1; i < RANGE; i++)`, then the construction yields a safe Boolean MRSW register.

        .

7. Show that if binary consensus using atomic registers is impossible for two threads, then it is also impossible for ___n___ threads, where ***n > 2***.

    .

8. Show that if binary consensus using atomic registers is impossible for ***n*** threads, then so is consensus over __*k*__ values, where ___k > 2___.

   .
